generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  role          String?
  address       String?
  phoneNumber   String?
  CustomerOrder CustomerOrder[]
  Driver        Driver?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CustomerOrder {
  id                  String      @id
  userId              String
  restaurantId        String
  driverId            String?
  orderDate           DateTime    @default(now())
  deliveryAddress     String
  totalPrice          Float
  statusId            String
  specialInstructions String?
  Driver              Driver?     @relation(fields: [driverId], references: [id])
  Restaurant          Restaurant  @relation(fields: [restaurantId], references: [id])
  OrderStatus         OrderStatus @relation(fields: [statusId], references: [id])
  users               User        @relation(fields: [userId], references: [id])
  OrderItem           OrderItem[]
}

model Driver {
  id            String          @id
  userId        String          @unique
  vehicleInfo   String?
  availability  Boolean         @default(true)
  CustomerOrder CustomerOrder[]
  users         User            @relation(fields: [userId], references: [id])
}

model Menu {
  id           String      @id
  restaurantId String
  name         String
  description  String?
  price        Float
  Restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  OrderItem    OrderItem[]
}

model OrderItem {
  id            String        @id
  orderId       String
  menuId        String
  quantity      Int
  itemPrice     Float
  Menu          Menu          @relation(fields: [menuId], references: [id])
  CustomerOrder CustomerOrder @relation(fields: [orderId], references: [id])
}

model OrderStatus {
  id            String          @id
  statusName    String
  CustomerOrder CustomerOrder[]
}

model Restaurant {
  id            String          @id
  name          String
  address       String
  phoneNumber   String?
  email         String?
  openingHours  String?
  shortName     String?
  CustomerOrder CustomerOrder[]
  Menu          Menu[]
}
