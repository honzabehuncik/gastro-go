generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  role          String?
  address       String?
  phoneNumber   String?
  orders        CustomerOrder[]
  driver        Driver?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Restaurant {
  id           String          @id @default(cuid())
  name         String
  address      String
  phoneNumber  String?
  email        String?
  openingHours String?
  shortName    String?
  deliveryTime String?
  desc         String?
  imageUrl     String?
  Category     Category[]
  orders       CustomerOrder[]
  badges       Badge[]         @relation("RestaurantId")
}

model Badge {
  id          Int          @id @default(autoincrement())
  label       String
  type        String
  restaurants Restaurant[] @relation("RestaurantId")
}

model Driver {
  id            String          @id @default(cuid())
  userId        String          @unique
  vehicleInfo   String?
  availability  Boolean         @default(true)
  authenticated Boolean         @default(false)
  orders        CustomerOrder[]
  user          User            @relation(fields: [userId], references: [id])
}

model Menu {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  categoryId  String
  imageUrl    String?
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Category {
  id           String     @id @default(cuid())
  restaurantId String
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menus        Menu[]
}

model OrderStatus {
  id         String          @id @default(cuid())
  statusName String
  orders     CustomerOrder[]
}

model CustomerOrder {
  id                  String      @id @default(cuid())
  userId              String
  restaurantId        String
  driverId            String?
  orderDate           DateTime    @default(now())
  deliveryAddress     String?
  totalPrice          Float?
  statusId            String
  specialInstructions String?
  driver              Driver?     @relation(fields: [driverId], references: [id])
  restaurant          Restaurant  @relation(fields: [restaurantId], references: [id])
  status              OrderStatus @relation(fields: [statusId], references: [id])
  user                User        @relation(fields: [userId], references: [id])
  orderItems          OrderItem[]
}

model OrderItem {
  id        String        @id @default(cuid())
  orderId   String
  menuId    String
  quantity  Int
  itemPrice Float
  menu      Menu          @relation(fields: [menuId], references: [id])
  order     CustomerOrder @relation(fields: [orderId], references: [id])
}

model Requests {
  id                  String    @id @default(cuid())
  userId              String?
  userName            String?
  restaurantId        String?
  restaurantName      String?
  restaurantEmail     String?
  restaurantNumber    Int?
  restaurantOpenTime  DateTime?
  restaurantCloseTime DateTime?
}
